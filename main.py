import logging
import re

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, state
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
import mysql.connector
from aiogram.types.message import ContentType
import markups as nav

LIQTOKEN = "632593626:TEST:sandbox_i29067075948"
logging.basicConfig(level=logging.INFO)

db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="4466,,!!",
    port="3306",
    database="beztwena"
)

cursor = db.cursor()
# cursor.execute("DROP TABLE Maraphon2")
# cursor.execute("CREATE TABLE users (id INT NOT NULL AUTO_INCREMENT, user_id INT UNSIGNED NULL, name VARCHAR(45) NULL, age INT NOT NULL, gender VARCHAR(45) NOT NULL, email VARCHAR(45) NULL, weight INT NULL, telephone VARCHAR(45) NULL, PRIMARY KEY (id))")
# cursor.execute("CREATE TABLE MaraphonMax(user_id INTEGER REFERENCES users(user_id), pay VARCHAR (45))")

# sql = "INSERT INTO users (name, age, gender, email, weight, telephone, user_id) VALUES (%s, %s, %s, %s, %s, %s, %s)"
# val = ("Sanya", "42", "–ß–æ–ª–æ–≤—ñ–∫", "sasha123@gmail.com", "76", "0987655546", 6)
# cursor.execute(sql, val)
# db.commit()

# print(cursor.rowcount, "–∑–∞–ø–∏—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–π.")

# sql = "INSERT INTO users (name, age, gender, email, weight, telephone, user_id) VALUES (%s, %s, %s, %s, %s, %s, %s)"
# val = [
#  ('Nick', '43', '–ß–æ–ª–æ–≤—ñ–∫', 'nick@gmail.com', '87', '0985655576', 2),
#  ('Mary', '13', '–ñ—ñ–Ω–∫–∞', 'matty@gmail.com', '47', '0635655576', 3),
#  ('Jon', '33', '–ß–æ–ª–æ–≤—ñ–∫', 'john@gmail.com', '97', '0505655576', 4),
# ]

# cursor.executemany(sql, val)

# db.commit()

# print(cursor.rowcount, "–∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ñ.")

logging.basicConfig(level=logging.INFO)

API_TOKEN = '2137005184:AAHwKMgWpr_QYzQMDiBBpn3EUYGnbYAzDB4'

# 2129667283:AAENu9KxnyqobfH2VbVr3eG8mrF9-3c_dBo
bot = Bot(token=API_TOKEN)

# For example use simple MemoryStorage for Dispatcher.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
email_re = re.compile(pattern)

pattern = r'(\w{3})\w{3}\w{4}'
phone_re = re.compile(pattern)


# States
class Form(StatesGroup):
    name = State()  # Will be represented in storage as 'Form:name'
    age = State()  # Will be represented in storage as 'Form:age'
    gender = State()  # Will be represented in storage as 'Form:gender'
    email = State()
    weight = State()
    phone = State()


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    """
    Conversation's entry point
    """
    # Set state
    await Form.name.set()

    await message.reply("–ü—Ä–∏–≤—ñ—Ç, –¥–∞–≤–∞–π –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à—É –ø—Ä–æ–≥—Ä–∞–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å! üòÉ\n–¢–≤–æ—î —ñ–º'—è? ü§ì")


# You can use state '*' if you need to handle all states
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await message.reply('Cancelled.', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(lambda message: not message.text.isalpha(), state=Form.name)
async def process_name_invalid(message: types.Message):
    return await message.reply("–í–≤–æ–¥—å –±—É–∫–≤–∞–º–∏! üòï")


@dp.message_handler(lambda message: message.text.isalpha(), state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    """
    Process user name
    """
    async with state.proxy() as data:
        data['name'] = message.text

    await Form.next()
    await message.reply("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? ü§ì")


# Check age. Age gotta be digit
@dp.message_handler(lambda message: not message.text.isdigit(), state=Form.age)
async def process_age_invalid(message: types.Message):
    """
    If age is invalid
    """
    return await message.reply("–í–≤–æ–¥—å —Ü–∏—Ñ—Ä–∞–º–∏ üòï\n–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")


@dp.message_handler(lambda message: message.text.isdigit(), state=Form.age)
async def process_age(message: types.Message, state: FSMContext):
    # Update state and data
    await Form.next()
    await state.update_data(age=int(message.text))

    # Configure ReplyKeyboardMarkup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("–ß–æ–ª–æ–≤—ñ–∫", "–ñ—ñ–Ω–∫–∞")
    markup.add("–Ü–Ω—à–µ")

    await message.reply("–¢–≤–æ—è —Å—Ç–∞—Ç—å? ü§ì", reply_markup=markup)


@dp.message_handler(lambda message: message.text not in ["–ß–æ–ª–æ–≤—ñ–∫", "–ñ—ñ–Ω–∫–∞", "–Ü–Ω—à–µ"], state=Form.gender)
async def process_gender_invalid(message: types.Message):
    """
    In this example gender has to be one of: Male, Female, Other.
    """
    return await message.reply("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üòï\n–í–∏–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å –∑ –∫–Ω–æ–ø–æ–∫!")


@dp.message_handler(state=Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = message.text

        # Remove keyboard
        markup = types.ReplyKeyboardRemove()
    await bot.send_message(message.chat.id, text="–¢–≤—ñ–π email? ü§ì", reply_markup=markup)
    # Finish conversation
    await Form.next()


@dp.message_handler(lambda msg: not re.match(email_re, msg.text), state=Form.email)
async def process_email_invalid(message: types.Message):
    text = '–¢–∏ –≤–≤—ñ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ—à—Ç—É üòï\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!'
    await bot.send_message(message.chat.id, text=text)


@dp.message_handler(lambda msg: re.match(email_re, msg.text), state=Form.email)
async def process_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['email'] = message.text

    await Form.next()
    await bot.send_message(message.chat.id, text="–¢–≤–æ—è –≤–∞–≥–∞? ü§ì ")


@dp.message_handler(lambda message: not message.text.isdigit(), state=Form.weight)
async def process_weight_invalid(message: types.Message):
    text = '–¢–∏ –≤–≤—ñ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –≤–∞–≥—É üòï\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!'
    await bot.send_message(message.chat.id, text=text)


@dp.message_handler(lambda message: message.text.isdigit(), state=Form.weight)
async def process_weight(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['weight'] = message.text

    await Form.next()
    await bot.send_message(message.chat.id, text="–¢–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–ª–µ—Ñ–æ–Ω—É? ü§ì")


@dp.message_handler(lambda msg: not re.match(phone_re, msg.text), state=Form.phone)
async def process_phone_invalid(message: types.Message):
    text = '–¢–∏ –≤–≤—ñ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üòï\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!'
    await bot.send_message(message.chat.id, text=text)


@dp.message_handler(lambda msg: re.match(phone_re, msg.text), state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text

    # And send message
    await bot.send_message(
        message.chat.id,
        md.text(
            md.text('üì®–¢–≤–æ—è –∑–∞—è–∫–∞: ', md.bold(data['name'])),
            md.text('üóì–í—ñ–∫:', md.code(data['age'])),
            md.text('üìå–í–∞–≥–∞:', data['weight']),
            md.text('üß¨–ü–æ–ª:', data['gender']),
            md.text('üìû–¢–µ–ª–µ—Ñ–æ–Ω:', data['phone']),
            md.text('üìßEmail:', data['email']),
            sep='\n',
        ),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=nav.mainMenu
    )
    sql = "INSERT INTO users (name, age, gender, email, weight, telephone, user_id) VALUES (%s, %s, %s, %s, %s, %s, %s)"
    val = (
        data['name'], data['age'], data['gender'], data['email'], data['weight'], data['phone'], message.from_user.id)
    cursor.execute(sql, val)
    db.commit()

    # Finish conversation
    await state.finish()


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Å—Ö—É–¥–µ–Ω–Ω—è':
        await bot.send_message(message.from_user.id, 'üèÖüëü–û–ø–∏—Å –ø—Ä–æ–≥—Ä–∞–º–∏ ‚Äú–°—Ö—É–¥–Ω–µ–Ω–Ω—è‚Äù : '
                                                     ' –Ø–∫—â–æ –≤–∏ –∑–∞–º—ñ—Ç–∏–ª–∏,—â–æ –Ω–∞–±—Ä–∞–ª–∏ –∫—ñ–ª—å–∫–∞ –ª–∏—à–Ω—ñ—Ö –∫—ñ–ª–æ–≥—Ä–∞–º—ñ–≤ ,'
                                                     '–≤—ñ–¥—á—É–≤–∞—î—Ç–µ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç '
                                                     ',–∞–±–æ –º–∞—î—Ç–µ –±–∞–∂–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—Ç–∏ –±—ñ–ª—å—à –µ—Å—Ç–µ—Ç–∏—á–Ω–æ, '
                                                     '—Ç–æ –≤–∏ –∑—Ä–æ–±–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä, –∫–æ–ª–∏ –∑–∞–≤—ñ—Ç–∞–ª–∏ –¥–æ –Ω–∞—Å. '
                                                     '–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–∞—Ä–∞–Ω—Ç—É—î –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∂–µ –∑–∞ –¥–µ–∫—ñ–ª—å–∫–∞ —Ç–∏–∂–Ω—ñ–≤'
                                                     ' –ø–ª—ñ–¥–Ω–æ—ó –ø—Ä–∞—Ü—ñ ,–∞ —Ç–∞–∫–æ–∂ —á—ñ—Ç–∫–∏–º –≥—Ä–∞—Ñ—ñ–∫–æ–º –∑–∞–Ω—è—Ç—å . '
                                                     '–í —Ü—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ –í–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —á—ñ—Ç–∫–∏–π –ø–ª–∞–Ω –≤–∞—à–∏—Ö –∑–∞–Ω—è—Ç—å'
                                                     '–Ω–∞ –æ–¥–∏–Ω –º—ñ—Å—è—Ü—å. –Ø–∫—â–æ –≤–∏ –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ —É –Ω–∞—à–∏—Ö –ø–æ—Å–ª—É–≥–∞—Ö ,'
                                                     '—Ç–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –í–∞–º –ø—Ä–∏–¥–±–∞—Ç–∏ –ø–ª–∞—Ç–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º'
                                                     '–∫–∞–Ω–∞–ª –∑ –∑–∞–Ω—è—Ç—Ç—è–º–∏ –≤—Å—å–æ–≥–æ –ª–∏—à –∑–∞ 149,99 –≥—Ä–Ω.–ú–∏ –≤—ñ—Ä–∏–º–æ —É —Ç–µ–±–µ.',
                               reply_markup=nav.info_inline_markup, )

    elif message.text == '–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –Ω–∞–±–æ—Ä—É –º–∞—Å–∏':
        await bot.send_message(message.from_user.id, 'üèÖüí™–û–ø–∏—Å –ø—Ä–æ–≥—Ä–∞–º–∏ ‚Äú–ù–∞–±—ñ—Ä –º–∞—Å–∏‚Äù : '
                                                     '–ó–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∫–æ—é –¥–≤—ñ —Ç—Ä–µ—Ç—ñ—Ö –ª—é–¥—Å—Ç–≤–∞ –Ω–µ–∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ —Å–≤–æ—ó–º —Ç—ñ–ª–æ–º, '
                                                     '—è–∫—â–æ —Ü–µ –ø—Ä–æ —Ç–µ–±–µ ,—ñ —Ç–∏ –¥–æ—Å—ñ –æ–¥—è–≥–∞—î—à —Å–≤—ñ—Ç—à–æ—Ç–∏ –∑ —Ä–æ–∑–º—ñ—Ä–æ–º S,'
                                                     '—Ç–æ —Ç–µ–±–µ —Å–ø—ñ—Ç–∫–∞–ª–∞ —É–¥–∞—á–∞ ,–±–æ  —Ç–∏ –∑–Ω–∞–π—à–æ–≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É.'
                                                     'BezTwena Team - —Ü–µ —Ç–æ–ø–æ–≤–∏–π –≤–∏–±—ñ—Ä ,'
                                                     '—è–∫—â–æ —Ç–∏ –º–∞—î—à –±–∞–∂–∞–Ω–Ω—è –∑–±—ñ–ª—å—à–∏—Ç–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—É—Ä—É ,'
                                                     '–∞ —Ç–∞–∫–æ–∂ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç–≤–æ—î —Ç—ñ–ª–æ –≤ –ø–æ—Ä—è–¥–æ–∫. '
                                                     '–£ –ø—Ä–æ–≥—Ä–∞–º—ñ ‚Äú–ù–∞–±—ñ—Ä –º–∞—Å–∏‚Äù ,—Ç–∏ –∑–Ω–∞–π–¥–µ—à –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑'
                                                     ' –ø—Ä–æ–≥—Ä–∞–º–æ—é –≤–ø—Ä–∞–≤ –Ω–∞ –º—ñ—Å—è—Ü—å, —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –¥–æ—Å—è–≥–Ω—É—Ç–∏ —Ç–æ–±—ñ '
                                                     '–±–∞–∂–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ  –ø—Ä–∏–¥–±–∞—Ç–∏ –ø–ª–∞—Ç–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É'
                                                     ' –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∑ –∑–∞–Ω—è—Ç—Ç—è–º–∏ –≤—Å—å–æ–≥–æ –ª–∏—à –∑–∞ 149,99 –≥—Ä–Ω. '
                                                     '–ú–∏ –≤—ñ—Ä–∏–º–æ —É —Ç–µ–±–µ.',

                               reply_markup=nav.More_inline_markup)


@dp.callback_query_handler(text="submonth")
async def submonth(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏",
                           description="–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å",
                           payload="month_sub", provider_token=LIQTOKEN, currency="UAH", start_parameter="test_bot",
                           prices=[{"label": "–ì—Ä–Ω", "amount": 15000}])


@dp.callback_query_handler(text="submonth2")
async def submonth2(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏",
                           description="–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å",
                           payload="month_help", provider_token=LIQTOKEN, currency="UAH",
                           start_parameter="test_bot",
                           prices=[{"label": "–ì—Ä–Ω", "amount": 15000}])


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    if message.successful_payment.invoice_payload == "month_sub":
        # –ü—ñ–¥–ø–∏—Å—É—î–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await bot.send_message(message.from_user.id, "üëü–í–∞–º –≤–∏–¥–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è —Å—Ö—É–¥–µ–Ω–Ω—è –Ω–∞ –º—ñ—Å—è—Ü—å!üëü",
                               reply_markup=nav.Pos_inline_markup, )
        sql = "INSERT INTO MaraphonMin (user_id, data_pay) VALUES (%s, %s)"
        val = (
            message.from_user.id, message.date)
        cursor.execute(sql, val)
        db.commit()

    elif message.successful_payment.invoice_payload == "month_help":
        await bot.send_message(message.from_user.id, "üëü–í–∞–º –≤–∏–¥–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è –Ω–∞–±–æ—Ä—É –º–∞—Å–∏ –Ω–∞ –º—ñ—Å—è—Ü—å!üëü",
                               reply_markup=nav.Gyp_inline_markup, )
        sql = "INSERT INTO MaraphonMax (user_id, data_pay) VALUES (%s, %s)"
        val = (
            message.from_user.id, message.date)
        cursor.execute(sql, val)
        db.commit()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
